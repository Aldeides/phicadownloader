/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui1;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;
import java.util.zip.InflaterInputStream;

public class NewApplication extends javax.swing.JFrame {

    private String directory;

    /**
     * Creates new form NewApplication
     */
    public NewApplication() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PhicaDownloader");
        setPreferredSize(new java.awt.Dimension(400, 400));

        jButton1.setText("Go");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Open Dir");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /**
         *
         */
        Runnable runnable = new DownloaderA();
        Thread t = new Thread(runnable);
        t.start();
        /* try {
            String txt = jTextField1.getText();
            URL url = new URL(txt);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty("User-Agent", "my agent name");
            String encoding = conn.getContentEncoding();
            if (encoding != null && encoding.equalsIgnoreCase("gzip!")) {
                is = new GZIPInputStream(conn.getInputStream());
            } else if (encoding != null && encoding.equalsIgnoreCase("deflate")) {
                is = new InflaterInputStream(conn.getInputStream());
            } else {
                is = conn.getInputStream();
            }
            pw = new PrintWriter(outputFile, "UTF-8");
            BufferedReader in = new BufferedReader(new InputStreamReader(is));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                //System.out.println(inputLine);
                pw.write(inputLine);
            }
            in.close();
            pw.close();
            System.gc();

            downloadImages(outputFile, createDir(outputFile));
            if (outputFile.delete()) {
                System.out.println(outputFile.getName() + " is deleted!");
                jTextArea1.append(outputFile.getName() + " is deleted!\n");
            } else {
                System.out.println("Delete operation is failed.");
                jTextArea1.append("Delete operation is failed.\n");
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        }*/
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().open(outputFile.getAbsoluteFile());
        } catch (IOException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    protected HttpURLConnection conn;
    protected InputStream is = null;
    protected PrintWriter pw;
    protected File outputFile = new File("file.txt");

    /**
     * @param File, String
     * @return void
     *
     */
    private void downloadImages(File inputFile, String dir) throws IOException {
        String filename = "";
        try {
            String os = System.getProperty("os.name");
            System.out.println(os);

            URL website;
            ReadableByteChannel rbc;
            FileInputStream in = new FileInputStream(inputFile);
            Scanner sc = new Scanner(in);
            List<String> links = new ArrayList<>();
            while (sc.hasNextLine()) {
                Pattern p = Pattern.compile("(attachmentid=)(\\w*)");
                Matcher m;
                m = p.matcher(sc.nextLine());
                while (m.find()) {
                    links.add("http://www.phica.net/forums/attachment.php?" + m.group());
                }
            }
            int elementi=links.size();
            System.out.println(elementi + " elementi da scaricare.");
            jTextArea1.append(elementi + " elementi da scaricare.\n");
            jTextArea1.update(jTextArea1.getGraphics());
            int i = 0;
            for (String str : links) {
                website = new URL(str);

                URLConnection conn = website.openConnection();
                Map<String, List<String>> map = conn.getHeaderFields();
                String server = conn.getHeaderField("Content-disposition");
                Pattern p = Pattern.compile("(\".*)(\\w*)");
                Matcher m;
                m = p.matcher(server);
                while (m.find()) {
                    String pattern = "(?i)(\".*?>)(.+?)()";
                    filename = (m.group().replaceAll("\"", ""));
                }

                rbc = Channels.newChannel(website.openStream());
                FileOutputStream fos = null;
                File f = null;
                if (!dir.equals("")) {
                    if (os.startsWith("Windows")) {
                        f = new File(dir + "\\" + java.net.URLDecoder.decode(filename, "UTF-8"));
                        if (!f.exists()) {
                            fos = new FileOutputStream(f);//"information" + i + ".jpg");
                            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
                            System.out.println(str + " ha generato un file");
                            jTextArea1.append((i+1) + "/"+elementi+") Salvato il file: " + java.net.URLDecoder.decode(filename, "UTF-8") + "\n");
                            jTextArea1.update(jTextArea1.getGraphics());
                            jTextArea1.setCaretPosition(jTextArea1.getText().length() - 1);
                            i++;
                            fos.close();
                        } else {
                            jTextArea1.append("File: " + java.net.URLDecoder.decode(filename, "UTF-8") + " già presente!\n");
                            jTextArea1.update(jTextArea1.getGraphics());
                            jTextArea1.setCaretPosition(jTextArea1.getText().length() - 1);
                            System.out.println("file saltato");
                            i++;
                        }
                    } else if (os.startsWith("Linux")) {
                        //**TODO: Implementazione Linux*/
                        f = new File(dir + "\\" + java.net.URLDecoder.decode(filename, "UTF-8"));
                        if (!f.exists()) {
                            fos = new FileOutputStream(f);
                            fos = new FileOutputStream(dir + "/" + java.net.URLDecoder.decode(filename, "UTF-8"));
                            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);

                            System.out.println(str + " ha generato un file");
                            jTextArea1.append(i + ") Salvato il file: " + java.net.URLDecoder.decode(filename, "UTF-8") + "\n");
                            jTextArea1.update(jTextArea1.getGraphics());
                            jTextArea1.setCaretPosition(jTextArea1.getText().length() - 1);
                            i++;
                        }
                    }

                } else {
                    fos = new FileOutputStream(filename);
                    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);

                    System.out.println(str + " ha generato un file");
                    jTextArea1.append(i + ") Salvato il file: " + java.net.URLDecoder.decode(filename, "UTF-8") + "\n");
                    jTextArea1.update(jTextArea1.getGraphics());
                    jTextArea1.setCaretPosition(jTextArea1.getText().length() - 1);
                    i++;
                    fos.close();
                }
                //System.out.println(str+" "+fos.getChannel().size());
/*                fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);

                System.out.println(str + " ha generato un file");
                jTextArea1.append(i + ") Salvato il file: " + java.net.URLDecoder.decode(filename, "UTF-8") + "\n");
                jTextArea1.update(jTextArea1.getGraphics());
                jTextArea1.setCaretPosition(jTextArea1.getText().length() - 1);
                i++;*/
                in.close();
                rbc.close();

            }
            System.out.println("Scaricati " + i + " files.");
            jTextArea1.append("Scaricati " + i + " files.\n");
            conn.disconnect();
            is.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (pw != null) {
                pw.close();
            }
            if (is != null) {
                is.close();
            }

        }
    }

    private String createDir(File outputFile) throws FileNotFoundException, IOException {
        //TODO: Read from outputFile the page Title between <title> tags and create a folder with his name
        BufferedReader in = new BufferedReader(new FileReader(outputFile));
        String line, updated = "Dir";
        Pattern p = Pattern.compile("<title>(.+?) - Allegati</title>");
        Matcher m;
        //	for (String ssn : input) {

        //String pattern = "(?i)(<title.*?>)(.+?)(<.*?title>)()";
        while ((line = in.readLine()) != null) {
            m = p.matcher(line);
            while (m.find()) {
                updated = m.group(1);
            }
        }
        //updated=java.net.URLEncoder.encode(updated,"UTF-8");
        updated = updated.replaceAll("[-+.^:,!?]", "");
        System.out.println("Creata la directory: " + updated);
        jTextArea1.append("Creata la directory: " + updated + "\n");
        jTextArea1.update(jTextArea1.getGraphics());
        in.close();
        boolean dir = new File(updated).mkdir();
        return updated;

    }

    class DownloaderA implements Runnable {

        public void run() {
            try {
                String txt = jTextField1.getText();
                URL url = new URL(txt);
                conn = (HttpURLConnection) url.openConnection();
                conn.setRequestProperty("User-Agent", "my agent name");
                String encoding = conn.getContentEncoding();
                if (encoding != null && encoding.equalsIgnoreCase("gzip!")) {
                    is = new GZIPInputStream(conn.getInputStream());
                } else if (encoding != null && encoding.equalsIgnoreCase("deflate")) {
                    is = new InflaterInputStream(conn.getInputStream());
                } else {
                    is = conn.getInputStream();
                }
                pw = new PrintWriter(outputFile, "UTF-8");
                BufferedReader in = new BufferedReader(new InputStreamReader(is));
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    //System.out.println(inputLine);
                    pw.write(inputLine);
                }
                in.close();
                pw.close();
                System.gc();

                downloadImages(outputFile, createDir(outputFile));
                if (outputFile.delete()) {
                    System.out.println(outputFile.getName() + " is deleted!");
                    jTextArea1.append(outputFile.getName() + " is deleted!\n");
                } else {
                    System.out.println("Delete operation is failed.");
                    jTextArea1.append("Delete operation is failed.\n");
                }
            } catch (MalformedURLException ex) {
                Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewApplication.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
            }
        }
    }
}
